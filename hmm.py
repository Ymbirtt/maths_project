from __future__ import division
from random  import *
from pylab import *


def mindex(xs):
    x = xs[0]
    min = 0
    for i in range(1,len(xs)):
        if xs[i]<x: min = i

    return min

def poisson(lamb,t0 , tmax):
    vs = [t0]   
    v = t0

    while v < tmax:
        v = v + expovariate(lamb)
        vs.append(v)

    return vs[:-1]

def plotPoisson(xs, args=''):
    """Given a list of values generated by a poisson process, 
    adds them to a plot in the canonical fashion
    show() must be called afterwards to display the plot"""

    ys = [x for x in range(len(xs)) for _ in (0,1)][:-1]
    
    xs = [xs[0]]+[x for x in xs[1:] for _ in (0,1)]

    plot(xs,ys,args)

############################################################

states = (0,0.5,1)
rates  = {
0  : {0.5: 1/60, 1:1/30},
0.5: {0: 1/10,   1:1/30},
1  : {0: 1/10, 0.5:1/60}
}


state = choice(states)

t_max = 100
t=0
ts = [(0,state)]
process = []


while t<t_max:
    Ts,ss = zip(*[(expovariate(rates[state][s]),s) for s in states if s != state])
    i = mindex(Ts)
    if state != 0: process += poisson(state,t,t+Ts[i])
    t += Ts[i]
    state = ss[i]
    ts.append((t,state))

print ts
print process
plotPoisson(process)
show()